package com.example.admin.serialdemo.Fragment;

import android.Manifest;
import android.app.ActivityManager;
import android.content.Context;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.telephony.TelephonyManager;
import android.text.format.Formatter;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.example.admin.serialdemo.Portutil.DeviceInfoManager;
import com.example.admin.serialdemo.R;
import com.example.admin.serialdemo.Utils.BaseFragment;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

import static android.content.Context.TELEPHONY_SERVICE;
import static com.bumptech.glide.gifdecoder.GifHeaderParser.TAG;

/**
 * 问题页面fragment
 */
public class Fragment_Help extends BaseFragment {

    @Bind(R.id.problem_1)
    RelativeLayout problem1;
    @Bind(R.id.problem_2)
    RelativeLayout problem2;
    @Bind(R.id.problem_3)
    RelativeLayout problem3;
    @Bind(R.id.problem_4)
    RelativeLayout problem4;
    @Bind(R.id.problem_5)
    RelativeLayout problem5;
    private View mView;
    DeviceInfoManager manger;
    private TextView mTextView, mTextView2;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.fragment4, container, false);
        ButterKnife.bind(this, mView);

        mTextView = mView.findViewById(R.id.textViewId);
        mTextView2 = mView.findViewById(R.id.textViewId2);
        mTextView2.setText("cpu使用率：" + manger.getTotalCpuRate() +
                "\n当前可用内存：" + manger.getAvailableMemory(getActivity()) +
                "\n已使用内存百分比：" + manger.getUsedPercentValue(getActivity()));
        getPhoneInfo();
        getDeviceInfo();
        return mView;
    }

    @Override
    public void onStart() {
        super.onStart();
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        ButterKnife.unbind(this);
    }

    @SuppressWarnings("deprecation")
    private String getDeviceInfo() {
        StringBuffer sb = new StringBuffer();
        sb.append("主板：" + Build.BOARD);
        sb.append("系统启动程序版本号：" + Build.BOOTLOADER);
        sb.append("cpu指令集：" + Build.CPU_ABI);
        sb.append("cpu指令集2" + Build.CPU_ABI2);
        sb.append("设置参数：" + Build.DEVICE);
        sb.append("显示屏参数：" + Build.DISPLAY);
        sb.append("HOST:" + Build.HOST);
        sb.append("版本：" + Build.MODEL);
        sb.append("硬件序列号：" + Build.SERIAL);
        sb.append("描述Build的标签：" + Build.TAGS);
        sb.append("TIME:" + Build.TIME);
        sb.append("builder类型：" + Build.TYPE);
        sb.append("USER:" + Build.USER);
        mTextView2.setText(sb.toString());
        return sb.toString();
    }

    /**
     * 获取手机信息
     */
    public void getPhoneInfo() {
        TelephonyManager tm = (TelephonyManager) getActivity().getSystemService(TELEPHONY_SERVICE);
//        String mtype = android.os.Build.MODEL; // 手机型号
//        String imei = tm.getDeviceId();
//        mTextView.setText("型号: " + mtype + "\n" +"IMEI: "+imei+"\n");
        mTextView.append("总内存: " + getTotalMemory() + "\n");
        mTextView.append("当前可用内存: " + getAvailMemory() + "\n");
        mTextView.append("CPU名字: " + getCpuName() + "\n");
        mTextView.append("CPU最大频率: " + getMaxCpuFreq() + "\n");
        mTextView.append("CPU最小频率: " + getMinCpuFreq() + "\n");
        mTextView.append("CPU当前频率: " + getCurCpuFreq() + "\n");
    }

    /**
     * 获取手机内存大小
     *
     * @return
     */
    private String getTotalMemory() {
        String str1 = "/proc/meminfo";// 系统内存信息文件
        String str2;
        String[] arrayOfString;
        long initial_memory = 0;
        try {
            FileReader localFileReader = new FileReader(str1);
            BufferedReader localBufferedReader = new BufferedReader(localFileReader, 8192);
            str2 = localBufferedReader.readLine();// 读取meminfo第一行，系统总内存大小

            arrayOfString = str2.split("\\s+");
            for (String num : arrayOfString) {
                Log.i(str2, num + "\t");
            }

            initial_memory = Integer.valueOf(arrayOfString[1]).intValue() * 1024;// 获得系统总内存，单位是KB，乘以1024转换为Byte
            localBufferedReader.close();

        } catch (IOException e) {
        }
        return Formatter.formatFileSize(getActivity().getBaseContext(), initial_memory);// Byte转换为KB或者MB，内存大小规格化
    }


    /**
     * GPS获取定位方式
     */
    public static Location getGPSLocation(@NonNull Context context) {
        Location location = null;
        LocationManager manager = getLocationManager(context);
        //高版本的权限检查
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            return null;
        }
        if (manager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {//是否支持GPS定位
            //获取最后的GPS定位信息，如果是第一次打开，一般会拿不到定位信息，一般可以请求监听，在有效的时间范围可以获取定位信息
            location = manager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
            Log.i(TAG, "getGPSLocation: "+location);
        }
        return location;
    }

    private static LocationManager getLocationManager(@NonNull Context context) {
        return (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
    }

    /**
     * 获取当前可用内存大小
     *
     * @return
     */
    private String getAvailMemory() {
        ActivityManager am = (ActivityManager) getActivity().getSystemService(Context.ACTIVITY_SERVICE);
        ActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();
        am.getMemoryInfo(mi);
        return Formatter.formatFileSize(getActivity().getBaseContext(), mi.availMem);
    }

    public static String getMaxCpuFreq() {
        String result = "";
        ProcessBuilder cmd;
        try {
            String[] args = {"/system/bin/cat",
                    "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq"};
            cmd = new ProcessBuilder(args);
            Process process = cmd.start();
            InputStream in = process.getInputStream();
            byte[] re = new byte[24];
            while (in.read(re) != -1) {
                result = result + new String(re);
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            result = "N/A";
        }
        return result.trim() + "Hz";
    }

    // 获取CPU最小频率（单位KHZ）

    public static String getMinCpuFreq() {
        String result = "";
        ProcessBuilder cmd;
        try {
            String[] args = {"/system/bin/cat",
                    "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq"};
            cmd = new ProcessBuilder(args);
            Process process = cmd.start();
            InputStream in = process.getInputStream();
            byte[] re = new byte[24];
            while (in.read(re) != -1) {
                result = result + new String(re);
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            result = "N/A";
        }
        return result.trim() + "Hz";
    }

    // 实时获取CPU当前频率（单位KHZ）

    public static String getCurCpuFreq() {
        String result = "N/A";
        try {
            FileReader fr = new FileReader(
                    "/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq");
            BufferedReader br = new BufferedReader(fr);
            String text = br.readLine();
            result = text.trim() + "Hz";
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }

    public static String getCpuName() {
        try {
            FileReader fr = new FileReader("/proc/cpuinfo");
            BufferedReader br = new BufferedReader(fr);
            String text = br.readLine();
            String[] array = text.split(":\\s+", 2);
            for (int i = 0; i < array.length; i++) {
            }
            return array[1];
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }


    @OnClick({R.id.problem_1, R.id.problem_2, R.id.problem_3, R.id.problem_4, R.id.problem_5})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.problem_1:
                getGPSLocation(getActivity());
                break;
            case R.id.problem_2:
                break;
            case R.id.problem_3:
                break;
            case R.id.problem_4:
                break;
            case R.id.problem_5:
                break;
        }
    }
}





