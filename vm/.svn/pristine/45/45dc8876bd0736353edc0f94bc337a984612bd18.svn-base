package com.py.controller;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.py.util.pay.PayConfigUtil;
import com.py.bean.Merchandise;
import com.py.bean.Order;
import com.py.bean.Weixin;
import com.py.dao.AlipayMapper;
import com.py.dao.MerchandiseMapper;
import com.py.dao.WeixinMapper;
import com.py.service.OrderService;
import com.py.util.pay.PayCommonUtil;
import com.py.util.pay.XMLUtil;

@Controller
public class WeixinPayController {

	@Autowired
	MerchandiseMapper merchandiseMapper;
	@Autowired
	WeixinMapper weixinMapper;
	@Autowired
	OrderService orderService;

	/**
	 * 微信支付回调
	 * 
	 * @Author 张志朋
	 * @param request
	 * @param response
	 * @throws Exception
	 *             void
	 * @Date 2016年9月28日 更新日志 2016年9月28日 张志朋 首次创建
	 *
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping(value = "weixinNotify")
	public void weixinNotify(HttpServletRequest request, HttpServletResponse response) throws Exception {
		System.out.println("调用回调方法");
		// 读取参数
		InputStream inputStream;
		StringBuffer sb = new StringBuffer();
		inputStream = request.getInputStream();
		String s;
		BufferedReader in = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
		while ((s = in.readLine()) != null) {
			sb.append(s);
		}
		in.close();
		inputStream.close();

		// 解析xml成map
		Map<String, String> m = new HashMap<String, String>();
		m = XMLUtil.doXMLParse(sb.toString());

		// 过滤空 设置 TreeMap
		SortedMap<Object, Object> packageParams = new TreeMap<Object, Object>();
		Iterator it = m.keySet().iterator();
		while (it.hasNext()) {
			String parameter = (String) it.next();
			String parameterValue = m.get(parameter);

			String v = "";
			if (null != parameterValue) {
				v = parameterValue.trim();
			}
			packageParams.put(parameter, v);
		}

		String out_trade_no = (String) packageParams.get("out_trade_no");

		Order order = orderService.selectByPrimaryKey(Integer.parseInt(out_trade_no));
		
		if (order == null) {
			orderService.orderMessage("订单id为"+out_trade_no+"因订单信息有误而支支付失败");
			return;
		}
		Merchandise merchandise = merchandiseMapper.selectByPrimaryKey(order.getOrderMerchandiseId());
		if (merchandise == null) {
			orderService.orderMessage("订单id为"+order.getOrderId()+"因商品信息有误而支支付失败");
			return;
		}
		Weixin weixin = weixinMapper
				.selectByCommercialTenantId(Integer.parseInt(merchandise.getMerchandiseCommercialTenantNumber()));
		if (weixin == null || weixin.getApiKey() == null) {
			orderService.orderMessage("订单id为"+order.getOrderId()+"因微信支付的配置信息有误而支支付失败");
			return;
		}
		// 账号信息
		String key = weixin.getApiKey(); // key

		// logger.info(packageParams);
		// 判断签名是否正确
		if (PayCommonUtil.isTenpaySign("UTF-8", packageParams, key)) {
			// ------------------------------
			// 处理业务开始
			// ------------------------------
			String resXml = "";
			if ("SUCCESS".equals((String) packageParams.get("result_code"))) {
				// 这里是支付成功
				////////// 执行自己的业务逻辑////////////////
				// String mch_id = (String) packageParams.get("mch_id");
				// String openid = (String) packageParams.get("openid");
				// String is_subscribe = (String) packageParams.get("is_subscribe");
				// String total_fee = (String) packageParams.get("total_fee");
				// String cash_fee_s = (String) packageParams.get("cash_fee");
				// String cash_fee = String.valueOf(Integer.parseInt(cash_fee_s) / 100);
				// String time_end = MctsUtils.numberDateToDate((String)
				// packageParams.get("time_end"));
				String transaction_id = (String) packageParams.get("transaction_id");
				
				////////// 执行自己的业务逻辑（报存订单信息到数据库）////////////////
				System.out.println("支付成功 ,处理业务成功");
				// logger.info("支付成功");

				int i = orderService.payCallBack(order, null,transaction_id);
				if (i==1){
					System.out.println("支付宝订单支付成功！");
					// 通知微信.异步确认成功.必写.不然会一直通知后台.八次之后就认为交易失败了.
					resXml = "<xml>" + "<return_code><![CDATA[SUCCESS]]></return_code>"
							+ "<return_msg><![CDATA[OK]]></return_msg>" + "</xml> ";
					// 处理业务完毕
					// 向微信服务器发送确认信息，若不发送，微信服务器会间隔不同的时间调用回调方法
					BufferedOutputStream out = new BufferedOutputStream(response.getOutputStream());
					out.write(resXml.getBytes());
					out.flush();
					out.close();
					System.out.println("通知微信.异步确认成功");
				}
				
			} else {
				// logger.info("支付失败,错误信息：" + packageParams.get("err_code"));
				resXml = "<xml>" + "<return_code><![CDATA[FAIL]]></return_code>"
						+ "<return_msg><![CDATA[报文为空]]></return_msg>" + "</xml> ";
				BufferedOutputStream out = new BufferedOutputStream(response.getOutputStream());
				out.write(resXml.getBytes());
				out.flush();
				out.close();
				System.out.println("支付失败,错误信息：" + packageParams.get("err_code"));
				orderService.orderMessage("订单id为"+order.getOrderId()+"支付失败,错误信息：" + packageParams.get("err_code"));
			}
		} else {
			orderService.orderMessage("订单id为"+order.getOrderId()+"通知签名验证失败");
			// logger.info("通知签名验证失败");
		}
		
	}

}
