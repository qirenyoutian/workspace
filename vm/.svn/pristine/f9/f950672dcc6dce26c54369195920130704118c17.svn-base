package com.py.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.py.bean.Admin;
import com.py.bean.AdminRole;
import com.py.bean.Aisle;
import com.py.bean.AisleInventory;
import com.py.bean.AisleMerchandise;
import com.py.bean.ChannelMerchandise;
import com.py.bean.Equipment;
import com.py.bean.Merchandise;
import com.py.bean.Order;
import com.py.bean.Point;
import com.py.bean.User;
import com.py.dao.AdminMapper;
import com.py.dao.AdminPointMapper;
import com.py.dao.AdminRoleMapper;
import com.py.dao.AisleMapper;
import com.py.dao.ChannelMerchandiseMapper;
import com.py.dao.EquipmentMapper;
import com.py.dao.MerchandiseMapper;
import com.py.dao.OrderMapper;
import com.py.dao.PointMapper;
import com.py.dao.RoleMapper;
import com.py.dao.SideboardMapper;
import com.py.dao.UserMapper;
import com.py.util.CommonUtil;
import com.py.util.Msg;
import com.py.util.OfTime;
import com.py.util.QRCodeUtil;
import com.py.util.SMSBean;
import com.py.util.UUIDUtils;

@Service
public class AppletService {

	@Autowired
	OrderMapper orderMapper;
	@Autowired
	SideboardMapper sideboardMapper;
	@Autowired
	AdminMapper adminMapper;
	@Autowired
	AdminRoleMapper adminRoleMapper;
	@Autowired
	RoleMapper roleMapper;
	@Autowired
	AdminPointMapper adminPointMapper;
	@Autowired
	UserMapper userMapper;
	@Autowired
	EquipmentMapper equipmentMapper;
	@Autowired
	PointMapper pointMapper;
	@Autowired
	AisleMapper aisleMapper;
	@Autowired
	ChannelMerchandiseMapper channelMerchandiseMapper;
	@Autowired
	MerchandiseMapper merchandiseMapper;
	
	/**
	 * 找回密码
	 * @param phonenum
	 * @param password
	 * @return
	 */
	public String retrievePassword(String phonenum,String password) {
		User user = new User();
		user.setUserAccount(phonenum);
		User findUser = userMapper.selectByPrimary(user);
		if(findUser == null) {
			return "该号码未注册";
		}else {
			findUser.setUserPassWord(password);
		}
		userMapper.updateByPrimaryKeySelective(findUser);
		return null;
	}
	
	/**
	 * 登录
	 * @param phonenum
	 * @param password
	 * @return
	 */
	public Msg login(String phonenum, String password) {
		SMSBean smsBean = (SMSBean) CommonUtil.MSG_MAP.get(phonenum);
		if(smsBean != null) {
			CommonUtil.MSG_MAP.remove(phonenum);
		}
		
		Msg msg = Msg.success();
		
		Admin admin = new Admin();
		admin.setAdminAccount(phonenum);
		admin.setAdminPassword(password);
		admin = adminMapper.selectByPrimary(admin);
		if(admin != null) {//管理员或运营人员
			
			SMSBean bean = new SMSBean(admin.getAdminId() ,admin.getAdminAccount(),UUIDUtils.getUUID(),null);
			CommonUtil.MSG_MAP.put(admin.getAdminAccount(), bean);
			
			AdminRole adminRole =  adminRoleMapper.selectAdminRoleByAdminId(admin.getAdminId());
			if(adminRole != null) {
				if(adminRole.getAdminRoleId() == 2) {//运营人员
					msg.add("page", "operation");
				}else {
					msg.add("page", "admin");
				}
			}
			msg.add("token", bean.getValue());
			msg.add("phonenum", admin.getAdminAccount());
			
		}else {//用户
			User user = new User();
			user.setUserAccount(phonenum);
			user.setUserPassWord(password);
			user = userMapper.selectByPrimary(user);
			if(user != null) {
				SMSBean bean = new SMSBean(user.getUserId() ,user.getUserAccount(),UUIDUtils.getUUID(),null);
				CommonUtil.MSG_MAP.put(user.getUserAccount(), bean);
				
				msg.add("token", bean.getValue());
				msg.add("phonenum", user.getUserAccount());
				msg.add("page", "user");
				
			}else {
				return Msg.fail().add("msg", "账号或密码错误");
			}
		}
		return msg;
	}
	
	/**
	 * 注册
	 * @param user
	 * @return
	 */
	public String register(User user) {
		User findUser = userMapper.selectByPrimary(user);
		if(findUser != null) {
			return "该号码已注册过";
		}
		user.setUserCreationTime(OfTime.getLongTime());
		userMapper.insertSelective(user);
		return null;
	}
	
	/**
	 * 获取点位和货道信息
	 * @param longitude
	 * @param latitude
	 * @return
	 */
	public Msg findPointAndAisle(Double longitude,Double latitude) {
		
		Equipment equipment = equipmentMapper.selectByLongitudeAndLatitude(longitude - 0.001,longitude + 0.001,latitude - 0.001,latitude + 0.001);
		
		Point point = null;
		List<AisleMerchandise> list = new ArrayList<AisleMerchandise>();
		if(equipment != null) {
			point = pointMapper.selectByPrimaryKey(equipment.getEquipmentPointId());
			List<Aisle> aisles = aisleMapper.selectByEquipmentId(equipment.getEquipmentId());
			for (Aisle aisle : aisles) {
				AisleMerchandise am = new AisleMerchandise();
				am.setAisliId(aisle.getAisleId());
				am.setAisleNumber(aisle.getAisleNumber());
				
				AisleInventory ai = aisle.getAisleInventorie();
				if(ai != null) {
					Merchandise merchandise = ai.getMerchandise();
					if(merchandise != null) {
						am.setMerchandiseName(merchandise.getMerchandiseName());
					}
				}
				list.add(am);
			}
		}
		
		Msg msg = Msg.success();
		msg.add("point", point);
		msg.add("aisles", list);
		return msg;
	}
	
	/**
	 * 获取取货码
	 * @param order
	 * @return
	 */
	public Order getPickupCode(Order order) {
		order = orderMapper.getPickupCode(order);
		
		if(order != null) {
			order.setOrderPickupCode(QRCodeUtil.producePickupCode());
			orderMapper.updateByPrimaryKeySelective(order);
		}
		
		return order;
	}

	/**
	 * 点位报表
	 * @param type
	 * @param startTime
	 * @param endTime
	 * @param index
	 * @return
	 */
	public Msg pointReport(Integer type, String startTime, String endTime, int index) {
		
		List<Order> orders = orderMapper.pointReport(startTime,endTime);
		
		
		
		return null;
	}

	/**
	 * 销售报表
	 * @param startTime
	 * @param endTime
	 * @param index
	 * @param type
	 * @return
	 */
	public Msg salesReportSum(String startTime, String endTime, int index, Integer type) {
		Map<String,Double> map =new TreeMap<String,Double>();
		String key = null;
		double amount = 0;
		
		/*List<Order> orders = orderMapper.getSalesReport(startTime,endTime);
		for (Order order : orders) {
			key = order.getOrderCreateTime().substring(5, index);
			if(order.getOrderChannelMerchandiseId() != null) {
				ChannelMerchandise channelMerchandise = channelMerchandiseMapper.selectByPrimaryKey(order.getOrderChannelMerchandiseId());
				if(channelMerchandise != null) {
					if(type == 0) {//金额
						amount = channelMerchandise.getChannelMerchandisePrice();
					}else {//量
						amount = 1;
					}
					if(map.get(key) == null) {
						map.put(key, amount);
					}else {
						map.put(key, map.get(key) + amount);
					}
				}
			}else {
				Merchandise merchandise = merchandiseMapper.selectByPrimaryKey(order.getOrderMerchandiseId());
				if(merchandise != null) {
					if(type == 0) {//金额
						amount = merchandise.getMerchandisePrice();
					}else {//量
						amount = 1;
					}
					if(map.get(key) == null) {
						map.put(key, amount);
					}else {
						map.put(key, map.get(key) + amount);
					}
				}
			}
		}*/
		
		return Msg.success(map);
	}

	/**
	 * 总销售量销售额
	 * @return
	 */
	public Msg grossSales(String startTime, String endTime) {
		Msg msg = Msg.success();
		msg.add("count", orderMapper.getSalesReportCount(startTime,endTime));
		msg.add("amount", orderMapper.getSalesReportSum(startTime,endTime));
		return msg;
	}
	
}
