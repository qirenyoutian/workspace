package com.py.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.py.bean.Equipment;
import com.py.bean.Order;
import com.py.bean.Point;
import com.py.bean.Sideboard;
import com.py.service.AppletService;
import com.py.service.EquipmentService;
import com.py.service.PointService;
import com.py.util.Msg;

@Controller
@RequestMapping("/applet")
public class AppletController {

	@Autowired
	AppletService appletService;
	@Autowired
	PointService pointService;
	@Autowired
	EquipmentService equipmentService;
	
	
	/*--------------------------------C端用户-----------------------------------------*/
	
	/**
	 * 获取点位
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findPoint")
	public Msg findPoint() {
		List<Point> list = pointService.selectByExample(new Point());
		return Msg.success(list);
	}
	
	/**
	 * 获取设备
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findEquipment")
	public Msg findEquipment(@RequestParam("point_id")Integer point_id) {
		Equipment equipment = new Equipment();
		equipment.setEquipmentPointId(point_id);
		List<Equipment> equipments = equipmentService.selectByExample(equipment);
		return Msg.success(equipments);
	}
	
	/**
	 * 获取该设备有的商品
	 * @param equipment_id
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/findSideboard")
	public Msg findSideboard(@RequestParam("equipment_id")Integer equipment_id) {
		Sideboard sideboard = new Sideboard();
		sideboard.setSideboardEquipmentId(equipment_id);
		List<Sideboard> sideboards = appletService.findSideboard(sideboard);
		return Msg.success(sideboards);
	}
	
	/**
	 * 获取取货码
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getPickupCode")
	public Msg getPickupCode(@RequestParam("equipment_id")Integer equipment_id,
			@RequestParam("merchandise_id")Integer merchandise_id) {
		Order order = new Order();
		order.setOrderEquipmentId(equipment_id);
		order.setOrderMerchandiseId(merchandise_id);
		try {
			order = appletService.getPickupCode(order);
			if(order == null) {
				return Msg.fail().add("msg", "未查询到相关订单信息");
			}
		} catch (Exception e) {
			return Msg.fail().add("msg", "处理失败");
		}
		
		return Msg.success(order.getOrderPickupCode());
	}
	
	/**
	 * 退货申请
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/returnedGoods")
	public Msg returnedGoods() {
		return Msg.success();
	}
	/*--------------------------------C端用户-----------------------------------------*/
	
	
	
	/*--------------------------------运营人员-----------------------------------------*/
	
	/**
	 * 铺货打卡
	 * @return
	 */
	public Msg clockIn() {
		return Msg.success();
	}
	
	/**
	 * 上报库存
	 * @return
	 */
	public Msg inventoryReport() {
		return Msg.success();
	}
	
	/*--------------------------------运营人员-----------------------------------------*/
	
	/**
	 * 设备监控信息查询
	 * @return
	 */
	public Msg findEquipmentMessage() {
		return Msg.success();
	}
	
	
	/*---------------------------------管理员-----------------------------------------*/
	
	
	
	/*---------------------------------管理员-----------------------------------------*/
	
}
