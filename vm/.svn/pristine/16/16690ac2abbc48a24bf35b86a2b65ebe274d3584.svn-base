package com.py.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.py.bean.Admin;
import com.py.bean.AdminPoint;
import com.py.bean.AdminRole;
import com.py.bean.Order;
import com.py.bean.User;
import com.py.dao.AdminMapper;
import com.py.dao.AdminPointMapper;
import com.py.dao.AdminRoleMapper;
import com.py.dao.OrderMapper;
import com.py.dao.RoleMapper;
import com.py.dao.SideboardMapper;
import com.py.dao.UserMapper;
import com.py.util.CommonUtil;
import com.py.util.Msg;
import com.py.util.OfTime;
import com.py.util.QRCodeUtil;
import com.py.util.SMSBean;
import com.py.util.UUIDUtils;

@Service
public class AppletService {

	@Autowired
	OrderMapper orderMapper;
	@Autowired
	SideboardMapper sideboardMapper;
	@Autowired
	AdminMapper adminMapper;
	@Autowired
	AdminRoleMapper adminRoleMapper;
	@Autowired
	RoleMapper roleMapper;
	@Autowired
	AdminPointMapper adminPointMapper;
	@Autowired
	UserMapper userMapper;
	
	
	
	/**
	 * 销售报表
	 * @param id
	 * @return
	 */
	public Msg salesReport(Integer adminId,String month) {
		Msg msg = Msg.success();
		Admin admin = adminMapper.selectByPrimaryKey(adminId);
		if(admin != null) {
			AdminRole adminRole =  adminRoleMapper.selectAdminRoleByAdminId(admin.getAdminId());
			if(adminRole != null) {
				Integer pointId = null; 
				if(adminRole.getAdminRoleId() == 2) {//运营人员
					AdminPoint adminPoint = adminPointMapper.selectByAdminId(admin.getAdminId());
					if(adminPoint != null) {
						pointId = adminPoint.getAdminPointId();
					}
				}
				List<Order> orders = orderMapper.salesReportByPointId(pointId,month);
				for (Order order : orders) {
					
				}
			}
		}
		
		return msg;
	}
	
	/**
	 * 获取取货码
	 * @param order
	 * @return
	 */
	public Order getPickupCode(Order order) {
		order = orderMapper.getPickupCode(order);
		
		if(order != null) {
			order.setOrderPickupCode(QRCodeUtil.producePickupCode());
			orderMapper.updateByPrimaryKeySelective(order);
		}
		
		return order;
	}
	
	/**
	 * 登录
	 * @param phonenum
	 * @param password
	 * @return
	 */
	public Msg login(String phonenum, String password) {
		SMSBean smsBean = (SMSBean) CommonUtil.MSG_MAP.get(phonenum);
		if(smsBean != null) {
			CommonUtil.MSG_MAP.remove(phonenum);
		}
		
		Msg msg = Msg.success();
		
		Admin admin = new Admin();
		admin.setAdminAccount(phonenum);
		admin.setAdminPassword(password);
		admin = adminMapper.selectByPrimary(admin);
		if(admin != null) {//管理员或运营人员
			
			SMSBean bean = new SMSBean(admin.getAdminId() ,admin.getAdminAccount(),UUIDUtils.getUUID(),null);
			CommonUtil.MSG_MAP.put(admin.getAdminAccount(), bean);
			
			AdminRole adminRole =  adminRoleMapper.selectAdminRoleByAdminId(admin.getAdminId());
			if(adminRole != null) {
				if(adminRole.getAdminRoleId() == 2) {//运营人员
					msg.add("page", "operation");
				}else {
					msg.add("page", "admin");
				}
			}
			msg.add("token", bean.getValue());
			msg.add("phonenum", admin.getAdminAccount());
			
		}else {//用户
			User user = new User();
			user.setUserAccount(phonenum);
			user.setUserPassWord(password);
			user = userMapper.selectByPrimary(user);
			if(user != null) {
				SMSBean bean = new SMSBean(user.getUserId() ,user.getUserAccount(),UUIDUtils.getUUID(),null);
				CommonUtil.MSG_MAP.put(user.getUserAccount(), bean);
				
				msg.add("token", bean.getValue());
				msg.add("phonenum", user.getUserAccount());
				msg.add("page", "user");
				
			}else {
				return Msg.fail().add("msg", "账号或密码错误");
			}
		}
		return msg;
	}
	
	/**
	 * 注册
	 * @param user
	 * @return
	 */
	public String register(User user) {
		User findUser = userMapper.selectByPrimary(user);
		if(findUser != null) {
			return "该号码已注册过";
		}
		user.setUserCreationTime(OfTime.getLongTime());
		userMapper.insertSelective(user);
		return null;
	}
	
	/**
	 * 找回密码
	 * @param phonenum
	 * @param password
	 * @return
	 */
	public String retrievePassword(String phonenum,String password) {
		User user = new User();
		user.setUserAccount(phonenum);
		User findUser = userMapper.selectByPrimary(user);
		if(findUser == null) {
			return "该号码未注册";
		}else {
			findUser.setUserPassWord(password);
		}
		userMapper.updateByPrimaryKeySelective(findUser);
		return null;
	}
	
}
