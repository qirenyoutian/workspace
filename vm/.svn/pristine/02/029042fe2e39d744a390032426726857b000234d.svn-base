<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.py.dao.AdminRoleMapper">
  <resultMap id="BaseResultMap" type="com.py.bean.AdminRole">
    <id column="admin_role_id" jdbcType="INTEGER" property="adminRoleId" />
    <result column="admin_role_admin_id" jdbcType="INTEGER" property="adminRoleAdminId" />
    <result column="admin_role_role_id" jdbcType="INTEGER" property="adminRoleRoleId" />
  </resultMap>
  <sql id="Base_Column_List">
    admin_role_id, admin_role_admin_id, admin_role_role_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from admin_role
    where admin_role_id = #{adminRoleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from admin_role
    where admin_role_id = #{adminRoleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.py.bean.AdminRole">
    insert into admin_role (admin_role_id, admin_role_admin_id, admin_role_role_id
      )
    values (#{adminRoleId,jdbcType=INTEGER}, #{adminRoleAdminId,jdbcType=INTEGER}, #{adminRoleRoleId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.py.bean.AdminRole">
    insert into admin_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="adminRoleId != null">
        admin_role_id,
      </if>
      <if test="adminRoleAdminId != null">
        admin_role_admin_id,
      </if>
      <if test="adminRoleRoleId != null">
        admin_role_role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="adminRoleId != null">
        #{adminRoleId,jdbcType=INTEGER},
      </if>
      <if test="adminRoleAdminId != null">
        #{adminRoleAdminId,jdbcType=INTEGER},
      </if>
      <if test="adminRoleRoleId != null">
        #{adminRoleRoleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.py.bean.AdminRole">
    update admin_role
    <set>
      <if test="adminRoleAdminId != null">
        admin_role_admin_id = #{adminRoleAdminId,jdbcType=INTEGER},
      </if>
      <if test="adminRoleRoleId != null">
        admin_role_role_id = #{adminRoleRoleId,jdbcType=INTEGER},
      </if>
    </set>
    where admin_role_id = #{adminRoleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.py.bean.AdminRole">
    update admin_role
    set admin_role_admin_id = #{adminRoleAdminId,jdbcType=INTEGER},
      admin_role_role_id = #{adminRoleRoleId,jdbcType=INTEGER}
    where admin_role_id = #{adminRoleId,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMapAdminAndRole" type="com.py.bean.AdminAndRole">
    <id column="admin_role_id" jdbcType="INTEGER" property="adminRoleId" />
    <result column="admin_role_admin_id" jdbcType="INTEGER" property="adminRoleAdminId" />
    <result column="admin_role_role_id" jdbcType="INTEGER" property="adminRoleRoleId" />
  		<collection property="adminlist" column="admin_id" ofType="com.py.bean.RoleAndAdmin">
	  		<id column="admin_id" jdbcType="INTEGER" property="adminId" />
		    <result column="admin_account" jdbcType="VARCHAR" property="adminAccount" />
		    <result column="admin_password" jdbcType="VARCHAR" property="adminPassword" />
		    <result column="admin_realname" jdbcType="VARCHAR" property="adminRealname" />
		    <result column="admin_phonenum" jdbcType="INTEGER" property="adminPhonenum" />
		    <result column="admin_email" jdbcType="VARCHAR" property="adminEmail" />
		    <result column="admin_registration_id" jdbcType="VARCHAR" property="adminRegistrationId" />
		    <result column="admin_registration_type" jdbcType="INTEGER" property="adminRegistrationType" />
		    <result column="admin_position" jdbcType="VARCHAR" property="adminPosition" />
		    <result column="admin_position_time" jdbcType="TIMESTAMP" property="adminPositionTime" />
		    <result column="admin_creation_time" jdbcType="TIMESTAMP" property="adminCreationTime" />
	  	</collection>
		<collection property="rolelist" column="role_id" ofType="com.py.bean.Role">
			<id column="role_id" jdbcType="INTEGER" property="roleId" />
			<result column="role_name" jdbcType="VARCHAR" property="roleName" />
			<result column="role_detail" jdbcType="VARCHAR" property="roleDetail" />
			<result column="role_createtime" jdbcType="TIMESTAMP" property="roleCreatetime" />
		</collection>
  </resultMap>
    <select id="selectAdminAndRole" resultMap="BaseResultMapAdminAndRole">
	SELECT
	  a.admin_account,b.*
	FROM
	  admin_role  ar  
	    JOIN  admin  a  ON  (  ar.admin_role_admin_id = a.admin_id)
		RIGHT JOIN  role b on (ar.admin_role_role_id = b.role_id)  
  </select>
  <select id="selectAdminByRoleId" resultMap="BaseResultMapAdminAndRole" parameterType="com.py.bean.Role">
	  	SELECT
			b.*
		FROM
			(
				SELECT
					*
				FROM
					admin_role f
				WHERE
					f.admin_role_role_id = #{roleId,jdbcType=INTEGER}
			) a
		LEFT JOIN admin b ON b.admin_id = a.admin_role_admin_id
  </select>
  <select id="selectAdminByAdminId" resultMap="BaseResultMapAdminAndRole" parameterType="com.py.bean.Admin">
	  	SELECT
			b.*
		FROM
			(
				SELECT
					*
				FROM
					admin_role f
				WHERE
					f.admin_role_admin_id = #{adminId,jdbcType=INTEGER}
			) a
		LEFT JOIN role b ON b.role_id = a.admin_role_role_id
  </select>
  
   <select id="selectByList" parameterType="java.util.ArrayList"  resultMap="BaseResultMap">
	SELECT
	  	*
	FROM
	 	admin_role
	 where admin_role_role_id in
	 <foreach collection="array" item="ids" open="(" close=")" separator=",">
		#{ids}	 
	 </foreach>
	    
  </select>
  
  <select id="selectAdminRoleByAdminId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from admin_role
    where admin_role_admin_id = #{adminId,jdbcType=INTEGER}
  </select>
  
</mapper>