package com.py.service;


import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.py.bean.Aisle;
import com.py.bean.Equipment;
import com.py.bean.EquipmentClassify;
import com.py.bean.Point;
import com.py.dao.AisleMapper;
import com.py.dao.EquipmentClassifyMapper;
import com.py.dao.EquipmentMapper;
import com.py.dao.PointMapper;
import com.py.util.Msg;


@Service
public class EquipmentService {

	@Autowired
	EquipmentMapper equipmentMapper;
	@Autowired
	PointMapper pointMapper;
	@Autowired
	EquipmentClassifyMapper equipmentClassifyMapper;
	@Autowired
	AisleMapper aisleMapper;
	
	
	
	public int deleteByPrimaryKey(Integer equipmentId) {
		return equipmentMapper.deleteByPrimaryKey(equipmentId);
	}

	public int insert(Equipment record) {
		return equipmentMapper.insert(record);
	}

	public int insertSelective(Equipment record) {
		return equipmentMapper.insertSelective(record);
	}

	public Equipment selectByPrimaryKey(Integer equipmentId) {
		return equipmentMapper.selectByPrimaryKey(equipmentId);
	}

	public int updateByPrimaryKeySelective(Equipment record) {
		return equipmentMapper.updateByPrimaryKeySelective(record);
	}

	public int updateByPrimaryKey(Equipment record) {
		return equipmentMapper.updateByPrimaryKey(record);
	}
	
	public Equipment selectByPrimary(Equipment equipment) {
		return equipmentMapper.selectByPrimary(equipment);
	}
	
	public List<Equipment> selectByExample(Equipment equipment) {
		return equipmentMapper.selectByExample(equipment);
	}
	
	/**
	 * 查找所有的设备信息
	 * @param equipment
	 * @return
	 */
	public List<Equipment> selectAllEquipment(Equipment equipment) {
		
		List<Equipment> eq = equipmentMapper.selectAllEquipment(equipment);
		
		return eq;
	}
	
	/**
	 * 根据设备编号查找点位
	 * @param content
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	public List<Point> selectEquipmentAndPoint(Equipment equipment) throws UnsupportedEncodingException {
		
		List<Point> pointList = pointMapper.selectByExampleInEquipment(equipment);
		return pointList;
		
		
	}

	

	/**
	 * 删除设备
	 * @param equipmenId
	 * @return
	 */
	public Msg deleteEquipment(Integer equipmentId,HttpServletRequest request) {
		
		//int b = Arrays.binarySearch(equipmentId,"0");
		
		if (equipmentId == 0) { //有0就是批量删除
			
			String[] equipmenIds = request.getParameterValues("equipmenIds");
			int a = equipmentMapper.deleteByArray(equipmenIds); 
			if (a == 2) {
				return Msg.success();
			}else{
				return Msg.fail();
			}
		}else{   //单独删除
			int a = equipmentMapper.deleteByPrimaryKey(equipmentId);
			
			if (a == 1) {
				return Msg.success();
			}else{
				return Msg.fail();
			}
		}
		
	}
	/**
	 * 修改设备信息
	 * @param request
	 * @return
	 */
	public Msg updateEquipment(Equipment equipment) {
		
		
		int a = equipmentMapper.updateByPrimaryKeySelective(equipment);
		if (a == 1) {
			Aisle aisle = new Aisle();
			aisle.setAisleEquipmentId(equipment.getEquipmentId());
			List<Aisle> asList =  aisleMapper.selectByExample(aisle);
			if (asList != null) { //如果里面有货道先把原来的货道删除
				aisleMapper.deleteByEquipmentId(equipment.getEquipmentId());
			}
			
			//生成货道信息
			EquipmentClassify equipmentClassify = new EquipmentClassify();
			equipmentClassify.setEquipmentClassifyId(equipment.getEquipmentClassifyId());
			List<EquipmentClassify> byExample = equipmentClassifyMapper.selectByExample(equipmentClassify);
			int row = 0;
			int column = 0;
			for (EquipmentClassify ec : byExample) {
				row = ec.getEquipmentClassifyRow();
				column = ec.getEquipmentClassifyLine();
			}
			List<Aisle> list = new ArrayList<Aisle>();
			for (int i = 0; i < row; i++) {
				for (int j = 0; j < column; j++) {
					
					aisle.setAisleAbscissa(i);
					aisle.setAisleOrdinate(j);
					list.add(aisle);
				}
				//System.out.println(i);
			}
			int b = aisleMapper.insertSelectiveByAisle(list);
		
			if (b > 0) {
				return Msg.success();
			}
			else{
				return Msg.fail();
			}
			
		}else{
			return Msg.fail();
		}
	}
	/**
	 * 根据设备ID查找
	 * @param id
	 * @return
	 */
	public Equipment selectEquipmentById(Integer id) {
		
		Equipment equipment = new Equipment();
		equipment.setEquipmentId(id);
		Equipment eq = equipmentMapper.selectByPrimary(equipment);
		
		return eq;
	}

/************************************************************** 设备类型管理 *******************************************************/

	
	
	
	public List<EquipmentClassify> selectEquipmentClassify(EquipmentClassify equipmentClassify) {
		// TODO Auto-generated method stub
		
		
		return equipmentClassifyMapper.selectByExample(equipmentClassify);
	}

	public int saveEquipmentClassify(EquipmentClassify equipmentClassify) {
		
		
		
		return equipmentClassifyMapper.insertSelective(equipmentClassify);
	}

	public Msg deleteEquipmentClassify(Integer equipmenClassifyId, String[] equipmenClassifyIds) {
		
		//int b = Arrays.binarySearch(equipmenClassifyId,"0");
		
		if (equipmenClassifyId == 0) { //有0就是批量删除
			
			//String[] equipmentClassifyIds = equipmenClassifyIds.getParameterValues("equipmentClassifyIds");
			
			int a = equipmentClassifyMapper.deleteByArray(equipmenClassifyIds); 
			if (a > 0) {
				return Msg.success();
			}else{
				return Msg.fail();
			}
		}else{   //单独删除
			int a = equipmentClassifyMapper.deleteByPrimaryKey(equipmenClassifyId);
			
			if (a == 1) {
				return Msg.success();
			}else{
				return Msg.fail();
			}
		}
	}
	/**
	 * 根据ID查找设备类型
	 * @param equipmentClassifyId
	 * @return
	 */

	public EquipmentClassify selectEquipmentClassFiyById(Integer equipmentClassifyId) {
		// TODO Auto-generated method stub
		
		
		return equipmentClassifyMapper.selectByPrimaryKey(equipmentClassifyId);
	}

	public int updateEquipmentClassfly(EquipmentClassify equipmentClassify) {
		
		
		return equipmentClassifyMapper.updateByPrimaryKeySelective(equipmentClassify);
	}

	
}
